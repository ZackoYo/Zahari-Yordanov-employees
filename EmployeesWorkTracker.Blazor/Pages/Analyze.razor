@page "/analyze"
@inject IHttpClientFactory HttpClientFactory

<h1>CSV Analysis</h1>

<InputFile OnChange="OnFileSelected" />
<button class="btn btn-primary mt-2" @onclick="OnAnalyze" disabled="@(_file == null || _loading)">
    Analyze
</button>

@if (_loading)
{
    <p><em>Analyzing...</em></p>
}

@if (_result != null)
{
    <h4 class="mt-3">Result</h4>
    <p>
        <strong>Employee #1:</strong> @_result.EmployeeId1
        &nbsp; | &nbsp;
        <strong>Employee #2:</strong> @_result.EmployeeId2
        &nbsp; | &nbsp;
        <strong>Total days together:</strong> @_result.TotalDaysWorkedTogether
    </p>

    @if (_result.Breakdown.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Project ID</th>
                    <th>Days worked together</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var b in _result.Breakdown)
                {
                    <tr>
                        <td>@b.ProjectId</td>
                        <td>@b.DaysWorked</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (_result.Warnings.Any())
    {
        <h5>Warnings</h5>
        <ul>
            @foreach (var w in _result.Warnings)
            {
                <li>@w</li>
            }
        </ul>
    }
}

@code {
    private IBrowserFile? _file;
    private bool _loading;
    private AnalyzeResponse? _result;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        _result = null;
    }

    private async Task OnAnalyze()
    {
        if (_file == null) return;
        _loading = true;
        _result = null;

        try
        {
            var client = HttpClientFactory.CreateClient("Api");
            using var content = new MultipartFormDataContent();
            using var stream = _file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            content.Add(new StreamContent(stream), "file", _file.Name);

            var resp = await client.PostAsync("/api/assignments/analyze", content);
            if (resp.IsSuccessStatusCode)
            {
                _result = await resp.Content.ReadFromJsonAsync<AnalyzeResponse>();
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                _result = new AnalyzeResponse
                {
                    Warnings = new() { $"API error: {msg}" }
                };
            }
        }
        catch (Exception ex)
        {
            _result = new AnalyzeResponse
            {
                Warnings = new() { $"Upload or Analyze error: {ex.Message}" }
            };
        }
        finally
        {
            _loading = false;
        }
    }
}